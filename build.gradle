plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.3'
	id 'io.spring.dependency-management' version '1.1.3'
	id "org.sonarqube" version "4.2.1.3168"
	id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}
jacoco {
	toolVersion = "0.8.7" // Use the latest version available
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.jetbrains:annotations:24.0.0'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation group: 'javax.validation', name: 'validation-api', version: '1.0.0.GA'

	implementation 'org.flywaydb:flyway-mysql'
	implementation 'mysql:mysql-connector-java:8.0.33'
	testImplementation 'org.springframework.cloud:spring-cloud-starter-bootstrap:4.0.4'
	testImplementation 'com.playtika.testcontainers:embedded-mysql:3.0.0-RC9'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	testImplementation 'org.springframework.security:spring-security-test'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

	implementation 'org.springframework.boot:spring-boot-starter-websocket' //Websockets-Stomp
	implementation 'org.webjars:sockjs-client:1.5.1' //SockJS
	implementation 'org.springframework:spring-messaging' //ChannelInterceptorAdapter

}

sonar {
	properties {
		property "sonar.projectKey", "rivaconcept-indproject"
		property "sonar.projectName", "Riva Concept - Individual Project"
//		property "sonar.qualitygate.wait", true
//		property "sonar.coverage.exclusions", "src/main/java/controller/**/*,src/main/java/configuration/**/*,src/main/java/domain/**/*,src/main/java/persistence/**/*"
		property "sonar.sources", "src/main/java/com/example/rivaconceptproject/business/impl"
	}
}

tasks.named('test') {
	useJUnitPlatform()
	forkEvery = 1
}
jacocoTestReport {
	reports {
		xml.required = true
	}
}
test.finalizedBy jacocoTestReport

tasks.named('sonar').configure {
	dependsOn test
}